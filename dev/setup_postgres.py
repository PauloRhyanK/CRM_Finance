# Script para configurar PostgreSQL local
# Execute este arquivo com: python setup_postgres.py

import psycopg2
from psycopg2 import sql
import os
from dotenv import load_dotenv

# Carrega vari√°veis do .env
load_dotenv()

def create_database():
    """
    Cria o banco de dados PostgreSQL se n√£o existir
    """
    db_name = os.getenv('POSTGRES_DB', 'crm_db')
    db_user = os.getenv('POSTGRES_USER', 'postgres')
    db_password = os.getenv('POSTGRES_PASSWORD', '1234')
    db_host = os.getenv('DB_HOST', 'localhost')
    
    try:
        # Conecta ao PostgreSQL (banco padr√£o 'postgres')
        connection = psycopg2.connect(
            host=db_host,
            user=db_user,
            password=db_password,
            database='postgres'  # Banco padr√£o para criar outros bancos
        )
        connection.autocommit = True
        cursor = connection.cursor()
        
        # Verifica se o banco j√° existe
        cursor.execute(
            "SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s",
            (db_name,)
        )
        exists = cursor.fetchone()
        
        if not exists:
            # Cria o banco de dados
            cursor.execute(
                sql.SQL("CREATE DATABASE {}").format(
                    sql.Identifier(db_name)
                )
            )
            print(f"‚úÖ Banco de dados '{db_name}' criado com sucesso!")
        else:
            print(f"‚ÑπÔ∏è  Banco de dados '{db_name}' j√° existe.")
            
        cursor.close()
        connection.close()
        
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao conectar com PostgreSQL: {e}")
        print("üí° Verifique se:")
        print("   - PostgreSQL est√° instalado e rodando")
        print("   - Usu√°rio e senha est√£o corretos no .env")
        print("   - Servi√ßo PostgreSQL est√° ativo")
        return False

def test_connection():
    """
    Testa a conex√£o com o banco criado
    """
    db_name = os.getenv('POSTGRES_DB', 'crm_db')
    db_user = os.getenv('POSTGRES_USER', 'postgres')
    db_password = os.getenv('POSTGRES_PASSWORD', '1234')
    db_host = os.getenv('DB_HOST', 'localhost')
    
    try:
        connection = psycopg2.connect(
            host=db_host,
            user=db_user,
            password=db_password,
            database=db_name
        )
        cursor = connection.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ Conex√£o testada com sucesso!")
        print(f"üìã PostgreSQL version: {version[0]}")
        
        cursor.close()
        connection.close()
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Configurando PostgreSQL para desenvolvimento...")
    print("=" * 50)
    
    if create_database():
        if test_connection():
            print("\nüéâ PostgreSQL configurado com sucesso!")
            print("üìù Pr√≥ximos passos:")
            print("   1. flask db init")
            print("   2. flask db migrate -m 'Initial migration'")
            print("   3. flask db upgrade")
            print("   4. python init_data.py")
            print("   5. ./init.ps1")
        else:
            print("\n‚ö†Ô∏è  Banco criado, mas h√° problema na conex√£o.")
    else:
        print("\n‚ùå N√£o foi poss√≠vel configurar o PostgreSQL.")
        print("üí° Considere usar SQLite como alternativa:")
        print("   - Descomente SQLALCHEMY_DATABASE_URI = 'sqlite:///crm_finance.db' no config.py")
        print("   - Comente as linhas PostgreSQL no config.py")
